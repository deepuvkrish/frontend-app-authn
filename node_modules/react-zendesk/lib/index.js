"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ZendeskAPI = void 0;

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var canUseDOM = function canUseDOM() {
  if (typeof window === 'undefined' || !window.document || !window.document.createElement) {
    return false;
  }

  return true;
};

var ZendeskAPI = function ZendeskAPI() {
  if (canUseDOM && window.zE) {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    window.zE.apply(null, args);
  } else {
    console.warn("Zendesk is not initialized yet");
  }
};

exports.ZendeskAPI = ZendeskAPI;

var Zendesk = /*#__PURE__*/function (_Component) {
  _inherits(Zendesk, _Component);

  var _super = _createSuper(Zendesk);

  function Zendesk(props) {
    var _this;

    _classCallCheck(this, Zendesk);

    _this = _super.call(this, props);
    _this.insertScript = _this.insertScript.bind(_assertThisInitialized(_this));
    _this.onScriptLoaded = _this.onScriptLoaded.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Zendesk, [{
    key: "onScriptLoaded",
    value: function onScriptLoaded() {
      if (typeof this.props.onLoaded === 'function') {
        this.props.onLoaded();
      }
    }
  }, {
    key: "insertScript",
    value: function insertScript(zendeskKey, defer) {
      var script = document.createElement('script');

      if (defer) {
        script.defer = true;
      } else {
        script.async = true;
      }

      script.id = 'ze-snippet';
      script.src = "https://static.zdassets.com/ekr/snippet.js?key=".concat(zendeskKey);
      script.addEventListener('load', this.onScriptLoaded);
      document.body.appendChild(script);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (canUseDOM && !window.zE) {
        var _this$props = this.props,
            defer = _this$props.defer,
            zendeskKey = _this$props.zendeskKey,
            other = _objectWithoutProperties(_this$props, ["defer", "zendeskKey"]);

        this.insertScript(zendeskKey, defer);
        window.zESettings = other;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!canUseDOM || !window.zE) {
        return;
      }

      delete window.zE;
      delete window.zESettings;
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Zendesk;
}(_react.Component);

exports["default"] = Zendesk;
Zendesk.propTypes = {
  zendeskKey: _propTypes["default"].string.isRequired,
  defer: _propTypes["default"].bool
};